#!/bin/bash

# Find a valid SSH_AUTH_SOCK and symlink it to a known location. Once it's
# at a known location, other applications like tmux can pick it up and
# automatically reconnect to the correct agent.
for agent in /tmp/ssh-*/agent.*; do
  if SSH_AUTH_SOCK="$agent" ssh-add -L > /dev/null 2>&1; then
    ln -sf "$agent" /tmp/andrew_ssh_auth_sock
  fi
done

# Apparently, having an rc file like this breaks X11 forwarding. By having an
# rc file, we apparently assume responsibility for running 'xauth' manually.
# From the 'sshd' man page:
#
#   If the file ~/.ssh/rc exists, sh(1) runs it after reading the environment
#   files but before starting the user's shell or command.  It must not pro‐
#   duce any output on stdout; stderr must be used instead.  If X11 forward‐
#   ing is in use, it will receive the "proto cookie" pair in its standard
#   input (and DISPLAY in its environment).  The script must call xauth(1)
#   because sshd will not run xauth automatically to add X11 cookies.
#
# The code below was adapted straight from the man page.
if read -r proto cookie && [ -n "$DISPLAY" ]; then
  if [ $(echo $DISPLAY | cut -c1-10) = 'localhost:' ]; then
    # X11UseLocalhost=yes
    echo add unix:$(echo $DISPLAY | cut -c11-) $proto $cookie
  else
    # X11UseLocalhost=no
    echo add $DISPLAY $proto $cookie
  fi | xauth -q -
fi
